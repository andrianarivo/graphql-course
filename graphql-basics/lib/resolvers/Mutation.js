"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _error = require("graphql/error");
var _uuid = require("uuid");
const Mutation = exports.default = {
  createUser(parent, args, _ref, info) {
    let {
      db
    } = _ref;
    const emailTaken = db.users.some(user => user.email === args.data.email);
    if (emailTaken) {
      throw new _error.GraphQLError('Email taken.');
    }
    const user = {
      id: (0, _uuid.v4)(),
      comments: [],
      posts: [],
      ...args.data
    };
    db.users.push(user);
    return user;
  },
  deleteUser(parent, args, _ref2, info) {
    let {
      db
    } = _ref2;
    const userIndex = db.users.findIndex(user => user.id === args.id);
    if (userIndex === -1) {
      throw new _error.GraphQLError('User not found.');
    }
    const deletedUsers = db.users.splice(userIndex, 1);
    db.posts = db.posts.filter(post => {
      const match = post.author === args.id;
      if (match) {
        db.comments = db.comments.filter(comment => comment.post !== post.id);
      }
      return !match;
    });
    return deletedUsers[0];
  },
  deletePost(parent, args, _ref3, info) {
    let {
      db
    } = _ref3;
    const postIndex = db.posts.findIndex(post => post.id === args.id);
    if (postIndex === -1) {
      throw new _error.GraphQLError('Post not found.');
    }
    const deletedPosts = db.posts.splice(postIndex, 1);
    db.comments = db.comments.filter(comment => comment.post !== args.id);
    return deletedPosts[0];
  },
  createPost(parent, args, _ref4, info) {
    let {
      db
    } = _ref4;
    const userExists = db.users.some(user => user.id === args.data.author);
    if (!userExists) {
      throw new _error.GraphQLError('User not found.');
    }
    const post = {
      id: (0, _uuid.v4)(),
      comments: [],
      title: args.data.title,
      body: args.data.body,
      published: args.data.published,
      // @ts-ignore
      author: args.data.author
    };
    db.posts.push(post);
    return post;
  },
  createComment(parent, args, _ref5, info) {
    let {
      db
    } = _ref5;
    const userExists = db.users.some(user => user.id === args.data.author);
    if (!userExists) {
      throw new _error.GraphQLError('User not found.');
    }
    const postExists = db.posts.some(post => post.id === args.data.post && post.published);
    if (!postExists) {
      throw new _error.GraphQLError('Post not found.');
    }
    const comment = {
      id: (0, _uuid.v4)(),
      text: args.data.text,
      // @ts-ignore
      post: args.data.post,
      // @ts-ignore
      author: args.data.author
    };
    db.comments.push(comment);
    return comment;
  },
  deleteComment(parent, args, _ref6, info) {
    let {
      db
    } = _ref6;
    const commentIndex = db.comments.findIndex(comment => comment.id === args.id);
    if (commentIndex === -1) {
      throw new _error.GraphQLError('Comment not found.');
    }
    const deletedComments = db.comments.splice(commentIndex, 1);
    return deletedComments[0];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,