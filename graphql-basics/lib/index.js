"use strict";

var _graphqlYoga = require("graphql-yoga");
var _http = require("http");
var _loadFiles = require("@graphql-tools/load-files");
var _uuid = require("uuid");
var _error = require("graphql/error");
async function main() {
  // Demo user data
  const users = [{
    id: '1',
    name: 'Andrew',
    email: 'andrew@example.com',
    age: 27,
    posts: [],
    comments: []
  }, {
    id: '2',
    name: 'Sarah',
    email: 'sarah@example.com',
    posts: [],
    comments: []
  }, {
    id: '3',
    name: 'Mike',
    email: 'mike@example.com',
    posts: [],
    comments: []
  }];
  let posts = [{
    id: '10',
    title: 'GraphQL 101',
    body: 'This is how to use GraphQL...',
    published: true,
    // @ts-ignore
    author: '1'
  }, {
    id: '11',
    title: 'GraphQL 201',
    body: 'This is an advanced GraphQL post...',
    published: true,
    // @ts-ignore
    author: '1'
  }, {
    id: '12',
    title: 'Programming Music',
    body: '',
    published: false,
    // @ts-ignore
    author: '3'
  }];
  let comments = [{
    id: '102',
    text: 'This worked well for me. Thanks!',
    // @ts-ignore
    author: '3',
    // @ts-ignore
    post: '10'
  }, {
    id: '103',
    text: 'Glad you enjoyed it.',
    // @ts-ignore
    author: '1',
    // @ts-ignore
    post: '10'
  }, {
    id: '104',
    text: 'This did not work.',
    // @ts-ignore
    author: '2',
    // @ts-ignore
    post: '11'
  }, {
    id: '105',
    text: 'Nevermind. I got it to work.',
    // @ts-ignore
    author: '1',
    // @ts-ignore
    post: '11'
  }];

  // Type definitions (schema)
  const typeDefs = await (0, _loadFiles.loadFiles)('**/*.graphql');

  // Resolvers
  const resolvers = {
    Query: {
      users(parent, args, ctx, info) {
        if (!args.query) {
          return users;
        }
        return users.filter(user => user.name.toLowerCase().includes(args.query.toLowerCase()));
      },
      posts(parent, args, ctx, info) {
        if (!args.query) {
          return posts;
        }
        return posts.filter(post => {
          const isTitleMatch = post.title.toLowerCase().includes(args.query.toLowerCase());
          const isBodyMatch = post.body.toLowerCase().includes(args.query.toLowerCase());
          return isTitleMatch || isBodyMatch;
        });
      },
      comments() {
        return comments;
      },
      me() {
        return users[1];
      },
      post() {
        return posts[1];
      }
    },
    Post: {
      author(parent, args, ctx, info) {
        return users.find(user => {
          return user.id === parent.author;
        });
      },
      comments(parent, args, ctx, info) {
        return comments.filter(comment => {
          return comment.post === parent.id;
        });
      }
    },
    User: {
      posts(parent, args, ctx, info) {
        return posts.filter(post => {
          return post.author === parent.id;
        });
      },
      comments(parent, args, ctx, info) {
        return comments.filter(comment => {
          return comment.author === parent.id;
        });
      }
    },
    Comment: {
      author(parent, args, ctx, info) {
        return users.find(user => user.id === parent.author);
      },
      post(parent, args, ctx, info) {
        return posts.find(post => post.id === parent.post);
      }
    },
    Mutation: {
      createUser(parent, args, ctx, info) {
        const emailTaken = users.some(user => user.email === args.data.email);
        if (emailTaken) {
          throw new _error.GraphQLError('Email taken.');
        }
        const user = {
          id: (0, _uuid.v4)(),
          comments: [],
          posts: [],
          ...args.data
        };
        users.push(user);
        return user;
      },
      deleteUser(parent, args, ctx, info) {
        const userIndex = users.findIndex(user => user.id === args.id);
        if (userIndex === -1) {
          throw new _error.GraphQLError('User not found.');
        }
        const deletedUsers = users.splice(userIndex, 1);
        posts = posts.filter(post => {
          const match = post.author === args.id;
          if (match) {
            comments = comments.filter(comment => comment.post !== post.id);
          }
          return !match;
        });
        return deletedUsers[0];
      },
      deletePost(parent, args, ctx, info) {
        const postIndex = posts.findIndex(post => post.id === args.id);
        if (postIndex === -1) {
          throw new _error.GraphQLError('Post not found.');
        }
        const deletedPosts = posts.splice(postIndex, 1);
        comments = comments.filter(comment => comment.post !== args.id);
        return deletedPosts[0];
      },
      createPost(parent, args, ctx, info) {
        const userExists = users.some(user => user.id === args.data.author);
        if (!userExists) {
          throw new _error.GraphQLError('User not found.');
        }
        const post = {
          id: (0, _uuid.v4)(),
          comments: [],
          title: args.data.title,
          body: args.data.body,
          published: args.data.published,
          // @ts-ignore
          author: args.data.author
        };
        posts.push(post);
        return post;
      },
      createComment(parent, args, ctx, info) {
        const userExists = users.some(user => user.id === args.data.author);
        if (!userExists) {
          throw new _error.GraphQLError('User not found.');
        }
        const postExists = posts.some(post => post.id === args.data.post && post.published);
        if (!postExists) {
          throw new _error.GraphQLError('Post not found.');
        }
        const comment = {
          id: (0, _uuid.v4)(),
          text: args.data.text,
          // @ts-ignore
          post: args.data.post,
          // @ts-ignore
          author: args.data.author
        };
        comments.push(comment);
        return comment;
      },
      deleteComment(parent, args, ctx, info) {
        const commentIndex = comments.findIndex(comment => comment.id === args.id);
        if (commentIndex === -1) {
          throw new _error.GraphQLError('Comment not found.');
        }
        const deletedComments = comments.splice(commentIndex, 1);
        return deletedComments[0];
      }
    }
  };
  const schema = (0, _graphqlYoga.createSchema)({
    typeDefs,
    resolvers
  });
  const yoga = (0, _graphqlYoga.createYoga)({
    schema
  });
  const server = (0, _http.createServer)(yoga);
  server.listen(4000, () => {
    console.info('Server is running on http://localhost:4000/graphql');
  });
}
main().catch(err => {
  console.error(err);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,