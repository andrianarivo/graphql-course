"use strict";

var _graphqlYoga = require("graphql-yoga");
var _http = require("http");
var _loadFiles = require("@graphql-tools/load-files");
var _uuid = require("uuid");
var _error = require("graphql/error");
async function main() {
  // Demo user data
  const users = [{
    id: '1',
    name: 'Andrew',
    email: 'andrew@example.com',
    age: 27,
    posts: [],
    comments: []
  }, {
    id: '2',
    name: 'Sarah',
    email: 'sarah@example.com',
    posts: [],
    comments: []
  }, {
    id: '3',
    name: 'Mike',
    email: 'mike@example.com',
    posts: [],
    comments: []
  }];
  const posts = [{
    id: '10',
    title: 'GraphQL 101',
    body: 'This is how to use GraphQL...',
    published: true,
    // @ts-ignore
    author: '1'
  }, {
    id: '11',
    title: 'GraphQL 201',
    body: 'This is an advanced GraphQL post...',
    published: true,
    // @ts-ignore
    author: '1'
  }, {
    id: '12',
    title: 'Programming Music',
    body: '',
    published: false,
    // @ts-ignore
    author: '3'
  }];
  const comments = [{
    id: '102',
    text: 'This worked well for me. Thanks!',
    // @ts-ignore
    author: '3',
    // @ts-ignore
    post: '10'
  }, {
    id: '103',
    text: 'Glad you enjoyed it.',
    // @ts-ignore
    author: '1',
    // @ts-ignore
    post: '10'
  }, {
    id: '104',
    text: 'This did not work.',
    // @ts-ignore
    author: '2',
    // @ts-ignore
    post: '11'
  }, {
    id: '105',
    text: 'Nevermind. I got it to work.',
    // @ts-ignore
    author: '1',
    // @ts-ignore
    post: '11'
  }];

  // Type definitions (schema)
  const typeDefs = await (0, _loadFiles.loadFiles)('**/*.graphql');

  // Resolvers
  const resolvers = {
    Query: {
      users(parent, args, ctx, info) {
        if (!args.query) {
          return users;
        }
        return users.filter(user => user.name.toLowerCase().includes(args.query.toLowerCase()));
      },
      posts(parent, args, ctx, info) {
        if (!args.query) {
          return posts;
        }
        return posts.filter(post => {
          const isTitleMatch = post.title.toLowerCase().includes(args.query.toLowerCase());
          const isBodyMatch = post.body.toLowerCase().includes(args.query.toLowerCase());
          return isTitleMatch || isBodyMatch;
        });
      },
      comments() {
        return comments;
      },
      me() {
        return users[1];
      },
      post() {
        return posts[1];
      }
    },
    Post: {
      author(parent, args, ctx, info) {
        return users.find(user => {
          return user.id === parent.author;
        });
      },
      comments(parent, args, ctx, info) {
        return comments.filter(comment => {
          return comment.post === parent.id;
        });
      }
    },
    User: {
      posts(parent, args, ctx, info) {
        return posts.filter(post => {
          return post.author === parent.id;
        });
      },
      comments(parent, args, ctx, info) {
        return comments.filter(comment => {
          return comment.author === parent.id;
        });
      }
    },
    Comment: {
      author(parent, args, ctx, info) {
        return users.find(user => {
          return user.id === parent.author;
        });
      },
      post(parent, args, ctx, info) {
        return posts.find(post => {
          return post.id === parent.post;
        });
      }
    },
    Mutation: {
      createUser(parent, args, ctx, info) {
        const emailTaken = users.some(user => user.email === args.data.email);
        if (emailTaken) {
          throw new _error.GraphQLError('Email taken.');
        }
        const user = {
          id: (0, _uuid.v4)(),
          comments: [],
          posts: [],
          ...args.data
        };
        users.push(user);
        return user;
      },
      createPost(parent, args, ctx, info) {
        const userExists = users.some(user => user.id === args.data.author);
        if (!userExists) {
          throw new _error.GraphQLError('User not found.');
        }
        const post = {
          id: (0, _uuid.v4)(),
          comments: [],
          title: args.data.title,
          body: args.data.body,
          published: args.data.published,
          // @ts-ignore
          author: args.data.author
        };
        posts.push(post);
        return post;
      },
      createComment(parent, args, ctx, info) {
        const userExists = users.some(user => user.id === args.data.author);
        if (!userExists) {
          throw new _error.GraphQLError('User not found.');
        }
        const postExists = posts.some(post => post.id === args.data.post && post.published);
        if (!postExists) {
          throw new _error.GraphQLError('Post not found.');
        }
        const comment = {
          id: (0, _uuid.v4)(),
          text: args.data.text,
          // @ts-ignore
          post: args.data.post,
          // @ts-ignore
          author: args.data.author
        };
        comments.push(comment);
        return comment;
      }
    }
  };
  const schema = (0, _graphqlYoga.createSchema)({
    typeDefs,
    resolvers
  });
  const yoga = (0, _graphqlYoga.createYoga)({
    schema
  });
  const server = (0, _http.createServer)(yoga);
  server.listen(4000, () => {
    console.info('Server is running on http://localhost:4000/graphql');
  });
}
main().catch(err => {
  console.error(err);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ3JhcGhxbFlvZ2EiLCJyZXF1aXJlIiwiX2h0dHAiLCJfbG9hZEZpbGVzIiwiX3V1aWQiLCJfZXJyb3IiLCJtYWluIiwidXNlcnMiLCJpZCIsIm5hbWUiLCJlbWFpbCIsImFnZSIsInBvc3RzIiwiY29tbWVudHMiLCJ0aXRsZSIsImJvZHkiLCJwdWJsaXNoZWQiLCJhdXRob3IiLCJ0ZXh0IiwicG9zdCIsInR5cGVEZWZzIiwibG9hZEZpbGVzIiwicmVzb2x2ZXJzIiwiUXVlcnkiLCJwYXJlbnQiLCJhcmdzIiwiY3R4IiwiaW5mbyIsInF1ZXJ5IiwiZmlsdGVyIiwidXNlciIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJpc1RpdGxlTWF0Y2giLCJpc0JvZHlNYXRjaCIsIm1lIiwiUG9zdCIsImZpbmQiLCJjb21tZW50IiwiVXNlciIsIkNvbW1lbnQiLCJNdXRhdGlvbiIsImNyZWF0ZVVzZXIiLCJlbWFpbFRha2VuIiwic29tZSIsImRhdGEiLCJHcmFwaFFMRXJyb3IiLCJ1dWlkdjQiLCJwdXNoIiwiY3JlYXRlUG9zdCIsInVzZXJFeGlzdHMiLCJjcmVhdGVDb21tZW50IiwicG9zdEV4aXN0cyIsInNjaGVtYSIsImNyZWF0ZVNjaGVtYSIsInlvZ2EiLCJjcmVhdGVZb2dhIiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwiY29uc29sZSIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJwcm9jZXNzIiwiZXhpdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZVNjaGVtYSwgY3JlYXRlWW9nYX0gZnJvbSAnZ3JhcGhxbC15b2dhJ1xuaW1wb3J0IHtjcmVhdGVTZXJ2ZXJ9IGZyb20gJ2h0dHAnXG5pbXBvcnQge2xvYWRGaWxlc30gZnJvbSBcIkBncmFwaHFsLXRvb2xzL2xvYWQtZmlsZXNcIlxuaW1wb3J0IHtSZXNvbHZlcnMsIFBvc3QsIENvbW1lbnQsIFVzZXJ9IGZyb20gJy4vZ2VuZXJhdGVkL2dyYXBocWwnXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xuaW1wb3J0IHtHcmFwaFFMRXJyb3J9IGZyb20gXCJncmFwaHFsL2Vycm9yXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG5cbiAgLy8gRGVtbyB1c2VyIGRhdGFcbiAgY29uc3QgdXNlcnM6IFVzZXJbXSA9IFtcbiAgICB7XG4gICAgICBpZDogJzEnLFxuICAgICAgbmFtZTogJ0FuZHJldycsXG4gICAgICBlbWFpbDogJ2FuZHJld0BleGFtcGxlLmNvbScsXG4gICAgICBhZ2U6IDI3LFxuICAgICAgcG9zdHM6IFtdLFxuICAgICAgY29tbWVudHM6IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJzInLFxuICAgICAgbmFtZTogJ1NhcmFoJyxcbiAgICAgIGVtYWlsOiAnc2FyYWhAZXhhbXBsZS5jb20nLFxuICAgICAgcG9zdHM6IFtdLFxuICAgICAgY29tbWVudHM6IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJzMnLFxuICAgICAgbmFtZTogJ01pa2UnLFxuICAgICAgZW1haWw6ICdtaWtlQGV4YW1wbGUuY29tJyxcbiAgICAgIHBvc3RzOiBbXSxcbiAgICAgIGNvbW1lbnRzOiBbXVxuICAgIH1cbiAgXVxuICBjb25zdCBwb3N0czogUG9zdFtdID0gW1xuICAgIHtcbiAgICAgIGlkOiAnMTAnLFxuICAgICAgdGl0bGU6ICdHcmFwaFFMIDEwMScsXG4gICAgICBib2R5OiAnVGhpcyBpcyBob3cgdG8gdXNlIEdyYXBoUUwuLi4nLFxuICAgICAgcHVibGlzaGVkOiB0cnVlLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYXV0aG9yOiAnMSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMTEnLFxuICAgICAgdGl0bGU6ICdHcmFwaFFMIDIwMScsXG4gICAgICBib2R5OiAnVGhpcyBpcyBhbiBhZHZhbmNlZCBHcmFwaFFMIHBvc3QuLi4nLFxuICAgICAgcHVibGlzaGVkOiB0cnVlLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYXV0aG9yOiAnMSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMTInLFxuICAgICAgdGl0bGU6ICdQcm9ncmFtbWluZyBNdXNpYycsXG4gICAgICBib2R5OiAnJyxcbiAgICAgIHB1Ymxpc2hlZDogZmFsc2UsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhdXRob3I6ICczJ1xuICAgIH1cbiAgXVxuICBjb25zdCBjb21tZW50czogQ29tbWVudFtdID0gW1xuICAgIHtcbiAgICAgIGlkOiAnMTAyJyxcbiAgICAgIHRleHQ6ICdUaGlzIHdvcmtlZCB3ZWxsIGZvciBtZS4gVGhhbmtzIScsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhdXRob3I6ICczJyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHBvc3Q6ICcxMCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJzEwMycsXG4gICAgICB0ZXh0OiAnR2xhZCB5b3UgZW5qb3llZCBpdC4nLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYXV0aG9yOiAnMScsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBwb3N0OiAnMTAnLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICcxMDQnLFxuICAgICAgdGV4dDogJ1RoaXMgZGlkIG5vdCB3b3JrLicsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhdXRob3I6ICcyJyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHBvc3Q6ICcxMSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMTA1JyxcbiAgICAgIHRleHQ6ICdOZXZlcm1pbmQuIEkgZ290IGl0IHRvIHdvcmsuJyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGF1dGhvcjogJzEnLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcG9zdDogJzExJ1xuICAgIH1cbiAgXVxuXG4gIC8vIFR5cGUgZGVmaW5pdGlvbnMgKHNjaGVtYSlcbiAgY29uc3QgdHlwZURlZnMgPSBhd2FpdCBsb2FkRmlsZXMoJyoqLyouZ3JhcGhxbCcpXG5cbiAgLy8gUmVzb2x2ZXJzXG4gIGNvbnN0IHJlc29sdmVyczogUmVzb2x2ZXJzID0ge1xuICAgIFF1ZXJ5OiB7XG4gICAgICB1c2VycyhwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICBpZighYXJncy5xdWVyeSkge1xuICAgICAgICAgIHJldHVybiB1c2Vyc1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1c2Vycy5maWx0ZXIoKHVzZXIpID0+XG4gICAgICAgICAgICB1c2VyLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhhcmdzLnF1ZXJ5IS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgcG9zdHMocGFyZW50LCBhcmdzLCBjdHgsIGluZm8pIHtcbiAgICAgICAgaWYoIWFyZ3MucXVlcnkpIHtcbiAgICAgICAgICByZXR1cm4gcG9zdHNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9zdHMuZmlsdGVyKChwb3N0KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGlzVGl0bGVNYXRjaCA9IHBvc3QudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhhcmdzLnF1ZXJ5IS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICBjb25zdCBpc0JvZHlNYXRjaCA9IHBvc3QuYm9keS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFyZ3MucXVlcnkhLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgIHJldHVybiBpc1RpdGxlTWF0Y2ggfHwgaXNCb2R5TWF0Y2hcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfSxcbiAgICAgIGNvbW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gY29tbWVudHNcbiAgICAgIH0sXG4gICAgICBtZSgpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJzWzFdXG4gICAgICB9LFxuICAgICAgcG9zdCgpIHtcbiAgICAgICAgcmV0dXJuIHBvc3RzWzFdXG4gICAgICB9XG4gICAgfSxcbiAgICBQb3N0OiB7XG4gICAgICBhdXRob3IocGFyZW50LCBhcmdzLCBjdHgsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuIHVzZXJzLmZpbmQoKHVzZXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gdXNlci5pZCA9PT0gKHBhcmVudC5hdXRob3IgYXMgdW5rbm93bilcbiAgICAgICAgfSkhXG4gICAgICB9LFxuICAgICAgY29tbWVudHMocGFyZW50LCBhcmdzLCBjdHgsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRzLmZpbHRlcigoY29tbWVudCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoY29tbWVudC5wb3N0IGFzIHVua25vd24pID09PSBwYXJlbnQuaWRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFVzZXI6IHtcbiAgICAgIHBvc3RzKHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIHJldHVybiBwb3N0cy5maWx0ZXIoKHBvc3QpID0+IHtcbiAgICAgICAgICByZXR1cm4gKHBvc3QuYXV0aG9yIGFzIHVua25vd24pID09PSBwYXJlbnQuaWRcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBjb21tZW50cyhwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICByZXR1cm4gY29tbWVudHMuZmlsdGVyKChjb21tZW50KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChjb21tZW50LmF1dGhvciBhcyB1bmtub3duKSA9PT0gcGFyZW50LmlkXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBDb21tZW50OiB7XG4gICAgICBhdXRob3IocGFyZW50LCBhcmdzLCBjdHgsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuIHVzZXJzLmZpbmQoKHVzZXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gdXNlci5pZCA9PT0gKHBhcmVudC5hdXRob3IgYXMgdW5rbm93bilcbiAgICAgICAgfSkhXG4gICAgICB9LFxuICAgICAgcG9zdChwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICByZXR1cm4gcG9zdHMuZmluZCgocG9zdCkgPT4ge1xuICAgICAgICAgIHJldHVybiBwb3N0LmlkID09PSAocGFyZW50LnBvc3QgYXMgdW5rbm93bilcbiAgICAgICAgfSkhXG4gICAgICB9XG4gICAgfSxcbiAgICBNdXRhdGlvbjoge1xuICAgICAgY3JlYXRlVXNlcihwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICBjb25zdCBlbWFpbFRha2VuID0gdXNlcnMuc29tZSgodXNlcikgPT4gdXNlci5lbWFpbCA9PT0gYXJncy5kYXRhLmVtYWlsKVxuICAgICAgICBpZihlbWFpbFRha2VuKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignRW1haWwgdGFrZW4uJylcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXI6IFVzZXIgPSB7XG4gICAgICAgICAgaWQ6IHV1aWR2NCgpLFxuICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgICBwb3N0czogW10sXG4gICAgICAgICAgLi4uYXJncy5kYXRhXG4gICAgICAgIH1cbiAgICAgICAgdXNlcnMucHVzaCh1c2VyKVxuXG4gICAgICAgIHJldHVybiB1c2VyXG4gICAgICB9LFxuICAgICAgY3JlYXRlUG9zdChwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICBjb25zdCB1c2VyRXhpc3RzID0gdXNlcnMuc29tZSgodXNlcikgPT4gdXNlci5pZCA9PT0gYXJncy5kYXRhLmF1dGhvcilcbiAgICAgICAgaWYoIXVzZXJFeGlzdHMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdVc2VyIG5vdCBmb3VuZC4nKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zdDogUG9zdCA9IHtcbiAgICAgICAgICBpZDogdXVpZHY0KCksXG4gICAgICAgICAgY29tbWVudHM6IFtdLFxuICAgICAgICAgIHRpdGxlOiBhcmdzLmRhdGEudGl0bGUsXG4gICAgICAgICAgYm9keTogYXJncy5kYXRhLmJvZHksXG4gICAgICAgICAgcHVibGlzaGVkOiBhcmdzLmRhdGEucHVibGlzaGVkLFxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBhdXRob3I6IGFyZ3MuZGF0YS5hdXRob3JcbiAgICAgICAgfVxuICAgICAgICBwb3N0cy5wdXNoKHBvc3QpXG5cbiAgICAgICAgcmV0dXJuIHBvc3RcbiAgICAgIH0sXG4gICAgICBjcmVhdGVDb21tZW50KHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIGNvbnN0IHVzZXJFeGlzdHMgPSB1c2Vycy5zb21lKCh1c2VyKSA9PiB1c2VyLmlkID09PSBhcmdzLmRhdGEuYXV0aG9yKVxuICAgICAgICBpZighdXNlckV4aXN0cykge1xuICAgICAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ1VzZXIgbm90IGZvdW5kLicpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3N0RXhpc3RzID0gcG9zdHMuc29tZSgocG9zdCkgPT4gcG9zdC5pZCA9PT0gYXJncy5kYXRhLnBvc3QgJiYgcG9zdC5wdWJsaXNoZWQpXG4gICAgICAgIGlmKCFwb3N0RXhpc3RzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignUG9zdCBub3QgZm91bmQuJylcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbW1lbnQ6IENvbW1lbnQgPSB7XG4gICAgICAgICAgaWQ6IHV1aWR2NCgpLFxuICAgICAgICAgIHRleHQ6IGFyZ3MuZGF0YS50ZXh0LFxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBwb3N0OiBhcmdzLmRhdGEucG9zdCxcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgYXV0aG9yOiBhcmdzLmRhdGEuYXV0aG9yXG4gICAgICAgIH1cbiAgICAgICAgY29tbWVudHMucHVzaChjb21tZW50KVxuXG4gICAgICAgIHJldHVybiBjb21tZW50XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2NoZW1hID0gY3JlYXRlU2NoZW1hKHtcbiAgICB0eXBlRGVmcyxcbiAgICByZXNvbHZlcnNcbiAgfSlcblxuICBjb25zdCB5b2dhID0gY3JlYXRlWW9nYSh7IHNjaGVtYSB9KVxuXG4gIGNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcih5b2dhKVxuXG4gIHNlcnZlci5saXN0ZW4oNDAwMCwgKCkgPT4ge1xuICAgIGNvbnNvbGUuaW5mbygnU2VydmVyIGlzIHJ1bm5pbmcgb24gaHR0cDovL2xvY2FsaG9zdDo0MDAwL2dyYXBocWwnKVxuICB9KVxufVxuXG5tYWluKCkuY2F0Y2goKGVycikgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycilcbiAgcHJvY2Vzcy5leGl0KDEpXG59KSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxLQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFKLE9BQUE7QUFFQSxlQUFlSyxJQUFJQSxDQUFBLEVBQUc7RUFFcEI7RUFDQSxNQUFNQyxLQUFhLEdBQUcsQ0FDcEI7SUFDRUMsRUFBRSxFQUFFLEdBQUc7SUFDUEMsSUFBSSxFQUFFLFFBQVE7SUFDZEMsS0FBSyxFQUFFLG9CQUFvQjtJQUMzQkMsR0FBRyxFQUFFLEVBQUU7SUFDUEMsS0FBSyxFQUFFLEVBQUU7SUFDVEMsUUFBUSxFQUFFO0VBQ1osQ0FBQyxFQUNEO0lBQ0VMLEVBQUUsRUFBRSxHQUFHO0lBQ1BDLElBQUksRUFBRSxPQUFPO0lBQ2JDLEtBQUssRUFBRSxtQkFBbUI7SUFDMUJFLEtBQUssRUFBRSxFQUFFO0lBQ1RDLFFBQVEsRUFBRTtFQUNaLENBQUMsRUFDRDtJQUNFTCxFQUFFLEVBQUUsR0FBRztJQUNQQyxJQUFJLEVBQUUsTUFBTTtJQUNa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