"use strict";

var _graphqlYoga = require("graphql-yoga");
var _http = require("http");
var _loadFiles = require("@graphql-tools/load-files");
async function main() {
  // Demo user data
  const users = [{
    id: '1',
    name: 'Andrew',
    email: 'andrew@example.com',
    age: 27
  }, {
    id: '2',
    name: 'Sarah',
    email: 'sarah@example.com'
  }, {
    id: '3',
    name: 'Mike',
    email: 'mike@example.com'
  }];
  const posts = [{
    id: '10',
    title: 'GraphQL 101',
    body: 'This is how to use GraphQL...',
    published: true
  }, {
    id: '11',
    title: 'GraphQL 201',
    body: 'This is an advanced GraphQL post...',
    published: true
  }, {
    id: '12',
    title: 'Programming Music',
    body: '',
    published: false
  }];

  // Type definitions (schema)
  const typeDefs = await (0, _loadFiles.loadFiles)('**/*.graphql');

  // Resolvers
  const resolvers = {
    Query: {
      users(parent, args, ctx, info) {
        if (!args.query) {
          return users;
        }
        return users.filter(user => user.name.toLowerCase().includes(args.query.toLowerCase()));
      },
      posts(parent, args, ctx, info) {
        if (!args.query) {
          return posts;
        }
        return posts.filter(post => {
          const isTitleMatch = post.title.toLowerCase().includes(args.query.toLowerCase());
          const isBodyMatch = post.body.toLowerCase().includes(args.query.toLowerCase());
          return isTitleMatch || isBodyMatch;
        });
      },
      me() {
        return {
          id: '123098',
          name: 'Mike',
          email: 'mike@example.com',
          age: 28
        };
      },
      post() {
        return {
          id: '092',
          title: 'GraphQL 101',
          body: '',
          published: false
        };
      }
    }
  };
  const schema = (0, _graphqlYoga.createSchema)({
    typeDefs,
    resolvers
  });
  const yoga = (0, _graphqlYoga.createYoga)({
    schema
  });
  const server = (0, _http.createServer)(yoga);
  server.listen(4000, () => {
    console.info('Server is running on http://localhost:4000/graphql');
  });
}
main().catch(err => {
  console.error(err);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ3JhcGhxbFlvZ2EiLCJyZXF1aXJlIiwiX2h0dHAiLCJfbG9hZEZpbGVzIiwibWFpbiIsInVzZXJzIiwiaWQiLCJuYW1lIiwiZW1haWwiLCJhZ2UiLCJwb3N0cyIsInRpdGxlIiwiYm9keSIsInB1Ymxpc2hlZCIsInR5cGVEZWZzIiwibG9hZEZpbGVzIiwicmVzb2x2ZXJzIiwiUXVlcnkiLCJwYXJlbnQiLCJhcmdzIiwiY3R4IiwiaW5mbyIsInF1ZXJ5IiwiZmlsdGVyIiwidXNlciIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJwb3N0IiwiaXNUaXRsZU1hdGNoIiwiaXNCb2R5TWF0Y2giLCJtZSIsInNjaGVtYSIsImNyZWF0ZVNjaGVtYSIsInlvZ2EiLCJjcmVhdGVZb2dhIiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwiY29uc29sZSIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJwcm9jZXNzIiwiZXhpdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZVNjaGVtYSwgY3JlYXRlWW9nYX0gZnJvbSAnZ3JhcGhxbC15b2dhJ1xuaW1wb3J0IHtjcmVhdGVTZXJ2ZXJ9IGZyb20gJ2h0dHAnXG5pbXBvcnQge2xvYWRGaWxlc30gZnJvbSBcIkBncmFwaHFsLXRvb2xzL2xvYWQtZmlsZXNcIjtcbmltcG9ydCB7UmVzb2x2ZXJzfSBmcm9tICcuL2dlbmVyYXRlZC9ncmFwaHFsJ1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuXG4gIC8vIERlbW8gdXNlciBkYXRhXG4gIGNvbnN0IHVzZXJzID0gW1xuICAgIHtcbiAgICAgIGlkOiAnMScsXG4gICAgICBuYW1lOiAnQW5kcmV3JyxcbiAgICAgIGVtYWlsOiAnYW5kcmV3QGV4YW1wbGUuY29tJyxcbiAgICAgIGFnZTogMjdcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMicsXG4gICAgICBuYW1lOiAnU2FyYWgnLFxuICAgICAgZW1haWw6ICdzYXJhaEBleGFtcGxlLmNvbScsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJzMnLFxuICAgICAgbmFtZTogJ01pa2UnLFxuICAgICAgZW1haWw6ICdtaWtlQGV4YW1wbGUuY29tJyxcbiAgICB9XG4gIF1cbiAgY29uc3QgcG9zdHMgPSBbXG4gICAge1xuICAgICAgaWQ6ICcxMCcsXG4gICAgICB0aXRsZTogJ0dyYXBoUUwgMTAxJyxcbiAgICAgIGJvZHk6ICdUaGlzIGlzIGhvdyB0byB1c2UgR3JhcGhRTC4uLicsXG4gICAgICBwdWJsaXNoZWQ6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMTEnLFxuICAgICAgdGl0bGU6ICdHcmFwaFFMIDIwMScsXG4gICAgICBib2R5OiAnVGhpcyBpcyBhbiBhZHZhbmNlZCBHcmFwaFFMIHBvc3QuLi4nLFxuICAgICAgcHVibGlzaGVkOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJzEyJyxcbiAgICAgIHRpdGxlOiAnUHJvZ3JhbW1pbmcgTXVzaWMnLFxuICAgICAgYm9keTogJycsXG4gICAgICBwdWJsaXNoZWQ6IGZhbHNlXG4gICAgfVxuICBdXG5cbiAgLy8gVHlwZSBkZWZpbml0aW9ucyAoc2NoZW1hKVxuICBjb25zdCB0eXBlRGVmcyA9IGF3YWl0IGxvYWRGaWxlcygnKiovKi5ncmFwaHFsJylcblxuICAvLyBSZXNvbHZlcnNcbiAgY29uc3QgcmVzb2x2ZXJzOiBSZXNvbHZlcnMgPSB7XG4gICAgUXVlcnk6IHtcbiAgICAgIHVzZXJzKHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIGlmKCFhcmdzLnF1ZXJ5KSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXJzXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVzZXJzLmZpbHRlcigodXNlcikgPT5cbiAgICAgICAgICAgIHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFyZ3MucXVlcnkhLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgICBwb3N0cyhwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICBpZighYXJncy5xdWVyeSkge1xuICAgICAgICAgIHJldHVybiBwb3N0c1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3N0cy5maWx0ZXIoKHBvc3QpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgaXNUaXRsZU1hdGNoID0gcG9zdC50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFyZ3MucXVlcnkhLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgIGNvbnN0IGlzQm9keU1hdGNoID0gcG9zdC5ib2R5LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoYXJncy5xdWVyeSEudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgcmV0dXJuIGlzVGl0bGVNYXRjaCB8fCBpc0JvZHlNYXRjaFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgbWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6ICcxMjMwOTgnLFxuICAgICAgICAgIG5hbWU6ICdNaWtlJyxcbiAgICAgICAgICBlbWFpbDogJ21pa2VAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIGFnZTogMjhcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBvc3QoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6ICcwOTInLFxuICAgICAgICAgIHRpdGxlOiAnR3JhcGhRTCAxMDEnLFxuICAgICAgICAgIGJvZHk6ICcnLFxuICAgICAgICAgIHB1Ymxpc2hlZDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHNjaGVtYSA9IGNyZWF0ZVNjaGVtYSh7XG4gICAgdHlwZURlZnMsXG4gICAgcmVzb2x2ZXJzXG4gIH0pXG5cbiAgY29uc3QgeW9nYSA9IGNyZWF0ZVlvZ2EoeyBzY2hlbWEgfSlcblxuICBjb25zdCBzZXJ2ZXIgPSBjcmVhdGVTZXJ2ZXIoeW9nYSlcblxuICBzZXJ2ZXIubGlzdGVuKDQwMDAsICgpID0+IHtcbiAgICBjb25zb2xlLmluZm8oJ1NlcnZlciBpcyBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6NDAwMC9ncmFwaHFsJylcbiAgfSlcbn1cblxubWFpbigpLmNhdGNoKChlcnIpID0+IHtcbiAgY29uc29sZS5lcnJvcihlcnIpXG4gIHByb2Nlc3MuZXhpdCgxKVxufSkiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBRixPQUFBO0FBR0EsZUFBZUcsSUFBSUEsQ0FBQSxFQUFHO0VBRXBCO0VBQ0EsTUFBTUMsS0FBSyxHQUFHLENBQ1o7SUFDRUMsRUFBRSxFQUFFLEdBQUc7SUFDUEMsSUFBSSxFQUFFLFFBQVE7SUFDZEMsS0FBSyxFQUFFLG9CQUFvQjtJQUMzQkMsR0FBRyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0VILEVBQUUsRUFBRSxHQUFHO0lBQ1BDLElBQUksRUFBRSxPQUFPO0lBQ2JDLEtBQUssRUFBRTtFQUNULENBQUMsRUFDRDtJQUNFRixFQUFFLEVBQUUsR0FBRztJQUNQQyxJQUFJLEVBQUUsTUFBTTtJQUNaQyxLQUFLLEVBQUU7RUFDVCxDQUFDLENBQ0Y7RUFDRCxNQUFNRSxLQUFLLEdBQUcsQ0FDWjtJQUNFSixFQUFFLEVBQUUsSUFBSTtJQUNSSyxLQUFLLEVBQUUsYUFBYTtJQUNwQkMsSUFBSSxFQUFFLCtCQUErQjtJQUNyQ0MsU0FBUyxFQUFFO0VBQ2IsQ0FBQyxFQUNEO0lBQ0VQLEVBQUUsRUFBRSxJQUFJO0lBQ1JLLEtBQUssRUFBRSxhQUFhO0lBQ3BCQyxJQUFJLEVBQUUscUNBQXFDO0lBQzNDQyxTQUFTLEVBQUU7RUFDYixDQUFDLEVBQ0Q7SUFDRVAsRUFBRSxFQUFFLElBQUk7SUFDUkssS0FBSyxFQUFFLG1CQUFtQjtJQUMxQkMsSUFBSSxFQUFFLEVBQUU7SUFDUkMsU0FBUyxFQUFF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