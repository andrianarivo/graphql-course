"use strict";

var _graphqlYoga = require("graphql-yoga");
var _http = require("http");
var _loadFiles = require("@graphql-tools/load-files");
var _uuid = require("uuid");
var _error = require("graphql/error");
async function main() {
  // Demo user data
  const users = [{
    id: '1',
    name: 'Andrew',
    email: 'andrew@example.com',
    age: 27,
    posts: [],
    comments: []
  }, {
    id: '2',
    name: 'Sarah',
    email: 'sarah@example.com',
    posts: [],
    comments: []
  }, {
    id: '3',
    name: 'Mike',
    email: 'mike@example.com',
    posts: [],
    comments: []
  }];
  const posts = [{
    id: '10',
    title: 'GraphQL 101',
    body: 'This is how to use GraphQL...',
    published: true,
    // @ts-ignore
    author: '1'
  }, {
    id: '11',
    title: 'GraphQL 201',
    body: 'This is an advanced GraphQL post...',
    published: true,
    // @ts-ignore
    author: '1'
  }, {
    id: '12',
    title: 'Programming Music',
    body: '',
    published: false,
    // @ts-ignore
    author: '3'
  }];
  const comments = [{
    id: '102',
    text: 'This worked well for me. Thanks!',
    // @ts-ignore
    author: '3',
    // @ts-ignore
    post: '10'
  }, {
    id: '103',
    text: 'Glad you enjoyed it.',
    // @ts-ignore
    author: '1',
    // @ts-ignore
    post: '10'
  }, {
    id: '104',
    text: 'This did not work.',
    // @ts-ignore
    author: '2',
    // @ts-ignore
    post: '11'
  }, {
    id: '105',
    text: 'Nevermind. I got it to work.',
    // @ts-ignore
    author: '1',
    // @ts-ignore
    post: '11'
  }];

  // Type definitions (schema)
  const typeDefs = await (0, _loadFiles.loadFiles)('**/*.graphql');

  // Resolvers
  const resolvers = {
    Query: {
      users(parent, args, ctx, info) {
        if (!args.query) {
          return users;
        }
        return users.filter(user => user.name.toLowerCase().includes(args.query.toLowerCase()));
      },
      posts(parent, args, ctx, info) {
        if (!args.query) {
          return posts;
        }
        return posts.filter(post => {
          const isTitleMatch = post.title.toLowerCase().includes(args.query.toLowerCase());
          const isBodyMatch = post.body.toLowerCase().includes(args.query.toLowerCase());
          return isTitleMatch || isBodyMatch;
        });
      },
      comments() {
        return comments;
      },
      me() {
        return users[1];
      },
      post() {
        return posts[1];
      }
    },
    Post: {
      author(parent, args, ctx, info) {
        return users.find(user => {
          return user.id === parent.author;
        });
      },
      comments(parent, args, ctx, info) {
        return comments.filter(comment => {
          return comment.post === parent.id;
        });
      }
    },
    User: {
      posts(parent, args, ctx, info) {
        return posts.filter(post => {
          return post.author === parent.id;
        });
      },
      comments(parent, args, ctx, info) {
        return comments.filter(comment => {
          return comment.author === parent.id;
        });
      }
    },
    Comment: {
      author(parent, args, ctx, info) {
        return users.find(user => {
          return user.id === parent.author;
        });
      },
      post(parent, args, ctx, info) {
        return posts.find(post => {
          return post.id === parent.post;
        });
      }
    },
    Mutation: {
      createUser(parent, args, ctx, info) {
        const emailTaken = users.some(user => user.email === args.email);
        if (emailTaken) {
          throw new _error.GraphQLError('Email taken.');
        }
        const user = {
          id: (0, _uuid.v4)(),
          comments: [],
          posts: [],
          ...args
        };
        users.push(user);
        return user;
      },
      createPost(parent, args, ctx, info) {
        const userExists = users.some(user => user.id === args.author);
        if (!userExists) {
          throw new _error.GraphQLError('User not found.');
        }
        const post = {
          id: (0, _uuid.v4)(),
          comments: [],
          title: args.title,
          body: args.body,
          published: args.published,
          // @ts-ignore
          author: args.author
        };
        posts.push(post);
        return post;
      },
      createComment(parent, args, ctx, info) {
        const userExists = users.some(user => user.id === args.author);
        if (!userExists) {
          throw new _error.GraphQLError('User not found.');
        }
        const postExists = posts.some(post => post.id === args.post && post.published);
        if (!postExists) {
          throw new _error.GraphQLError('Post not found.');
        }
        const comment = {
          id: (0, _uuid.v4)(),
          text: args.text,
          // @ts-ignore
          post: args.post,
          // @ts-ignore
          author: args.author
        };
        comments.push(comment);
        return comment;
      }
    }
  };
  const schema = (0, _graphqlYoga.createSchema)({
    typeDefs,
    resolvers
  });
  const yoga = (0, _graphqlYoga.createYoga)({
    schema
  });
  const server = (0, _http.createServer)(yoga);
  server.listen(4000, () => {
    console.info('Server is running on http://localhost:4000/graphql');
  });
}
main().catch(err => {
  console.error(err);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ3JhcGhxbFlvZ2EiLCJyZXF1aXJlIiwiX2h0dHAiLCJfbG9hZEZpbGVzIiwiX3V1aWQiLCJfZXJyb3IiLCJtYWluIiwidXNlcnMiLCJpZCIsIm5hbWUiLCJlbWFpbCIsImFnZSIsInBvc3RzIiwiY29tbWVudHMiLCJ0aXRsZSIsImJvZHkiLCJwdWJsaXNoZWQiLCJhdXRob3IiLCJ0ZXh0IiwicG9zdCIsInR5cGVEZWZzIiwibG9hZEZpbGVzIiwicmVzb2x2ZXJzIiwiUXVlcnkiLCJwYXJlbnQiLCJhcmdzIiwiY3R4IiwiaW5mbyIsInF1ZXJ5IiwiZmlsdGVyIiwidXNlciIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJpc1RpdGxlTWF0Y2giLCJpc0JvZHlNYXRjaCIsIm1lIiwiUG9zdCIsImZpbmQiLCJjb21tZW50IiwiVXNlciIsIkNvbW1lbnQiLCJNdXRhdGlvbiIsImNyZWF0ZVVzZXIiLCJlbWFpbFRha2VuIiwic29tZSIsIkdyYXBoUUxFcnJvciIsInV1aWR2NCIsInB1c2giLCJjcmVhdGVQb3N0IiwidXNlckV4aXN0cyIsImNyZWF0ZUNvbW1lbnQiLCJwb3N0RXhpc3RzIiwic2NoZW1hIiwiY3JlYXRlU2NoZW1hIiwieW9nYSIsImNyZWF0ZVlvZ2EiLCJzZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJsaXN0ZW4iLCJjb25zb2xlIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsInByb2Nlc3MiLCJleGl0Il0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlU2NoZW1hLCBjcmVhdGVZb2dhfSBmcm9tICdncmFwaHFsLXlvZ2EnXG5pbXBvcnQge2NyZWF0ZVNlcnZlcn0gZnJvbSAnaHR0cCdcbmltcG9ydCB7bG9hZEZpbGVzfSBmcm9tIFwiQGdyYXBocWwtdG9vbHMvbG9hZC1maWxlc1wiXG5pbXBvcnQge1Jlc29sdmVycywgUG9zdCwgQ29tbWVudCwgVXNlcn0gZnJvbSAnLi9nZW5lcmF0ZWQvZ3JhcGhxbCdcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnXG5pbXBvcnQge0dyYXBoUUxFcnJvcn0gZnJvbSBcImdyYXBocWwvZXJyb3JcIjtcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcblxuICAvLyBEZW1vIHVzZXIgZGF0YVxuICBjb25zdCB1c2VyczogVXNlcltdID0gW1xuICAgIHtcbiAgICAgIGlkOiAnMScsXG4gICAgICBuYW1lOiAnQW5kcmV3JyxcbiAgICAgIGVtYWlsOiAnYW5kcmV3QGV4YW1wbGUuY29tJyxcbiAgICAgIGFnZTogMjcsXG4gICAgICBwb3N0czogW10sXG4gICAgICBjb21tZW50czogW11cbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMicsXG4gICAgICBuYW1lOiAnU2FyYWgnLFxuICAgICAgZW1haWw6ICdzYXJhaEBleGFtcGxlLmNvbScsXG4gICAgICBwb3N0czogW10sXG4gICAgICBjb21tZW50czogW11cbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMycsXG4gICAgICBuYW1lOiAnTWlrZScsXG4gICAgICBlbWFpbDogJ21pa2VAZXhhbXBsZS5jb20nLFxuICAgICAgcG9zdHM6IFtdLFxuICAgICAgY29tbWVudHM6IFtdXG4gICAgfVxuICBdXG4gIGNvbnN0IHBvc3RzOiBQb3N0W10gPSBbXG4gICAge1xuICAgICAgaWQ6ICcxMCcsXG4gICAgICB0aXRsZTogJ0dyYXBoUUwgMTAxJyxcbiAgICAgIGJvZHk6ICdUaGlzIGlzIGhvdyB0byB1c2UgR3JhcGhRTC4uLicsXG4gICAgICBwdWJsaXNoZWQ6IHRydWUsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhdXRob3I6ICcxJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICcxMScsXG4gICAgICB0aXRsZTogJ0dyYXBoUUwgMjAxJyxcbiAgICAgIGJvZHk6ICdUaGlzIGlzIGFuIGFkdmFuY2VkIEdyYXBoUUwgcG9zdC4uLicsXG4gICAgICBwdWJsaXNoZWQ6IHRydWUsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhdXRob3I6ICcxJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICcxMicsXG4gICAgICB0aXRsZTogJ1Byb2dyYW1taW5nIE11c2ljJyxcbiAgICAgIGJvZHk6ICcnLFxuICAgICAgcHVibGlzaGVkOiBmYWxzZSxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGF1dGhvcjogJzMnXG4gICAgfVxuICBdXG4gIGNvbnN0IGNvbW1lbnRzOiBDb21tZW50W10gPSBbXG4gICAge1xuICAgICAgaWQ6ICcxMDInLFxuICAgICAgdGV4dDogJ1RoaXMgd29ya2VkIHdlbGwgZm9yIG1lLiBUaGFua3MhJyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGF1dGhvcjogJzMnLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcG9zdDogJzEwJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnMTAzJyxcbiAgICAgIHRleHQ6ICdHbGFkIHlvdSBlbmpveWVkIGl0LicsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhdXRob3I6ICcxJyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHBvc3Q6ICcxMCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJzEwNCcsXG4gICAgICB0ZXh0OiAnVGhpcyBkaWQgbm90IHdvcmsuJyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGF1dGhvcjogJzInLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcG9zdDogJzExJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICcxMDUnLFxuICAgICAgdGV4dDogJ05ldmVybWluZC4gSSBnb3QgaXQgdG8gd29yay4nLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYXV0aG9yOiAnMScsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBwb3N0OiAnMTEnXG4gICAgfVxuICBdXG5cbiAgLy8gVHlwZSBkZWZpbml0aW9ucyAoc2NoZW1hKVxuICBjb25zdCB0eXBlRGVmcyA9IGF3YWl0IGxvYWRGaWxlcygnKiovKi5ncmFwaHFsJylcblxuICAvLyBSZXNvbHZlcnNcbiAgY29uc3QgcmVzb2x2ZXJzOiBSZXNvbHZlcnMgPSB7XG4gICAgUXVlcnk6IHtcbiAgICAgIHVzZXJzKHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIGlmKCFhcmdzLnF1ZXJ5KSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXJzXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVzZXJzLmZpbHRlcigodXNlcikgPT5cbiAgICAgICAgICAgIHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFyZ3MucXVlcnkhLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgICBwb3N0cyhwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICBpZighYXJncy5xdWVyeSkge1xuICAgICAgICAgIHJldHVybiBwb3N0c1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3N0cy5maWx0ZXIoKHBvc3QpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgaXNUaXRsZU1hdGNoID0gcG9zdC50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFyZ3MucXVlcnkhLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgIGNvbnN0IGlzQm9keU1hdGNoID0gcG9zdC5ib2R5LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoYXJncy5xdWVyeSEudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgcmV0dXJuIGlzVGl0bGVNYXRjaCB8fCBpc0JvZHlNYXRjaFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgY29tbWVudHMoKSB7XG4gICAgICAgIHJldHVybiBjb21tZW50c1xuICAgICAgfSxcbiAgICAgIG1lKCkge1xuICAgICAgICByZXR1cm4gdXNlcnNbMV1cbiAgICAgIH0sXG4gICAgICBwb3N0KCkge1xuICAgICAgICByZXR1cm4gcG9zdHNbMV1cbiAgICAgIH1cbiAgICB9LFxuICAgIFBvc3Q6IHtcbiAgICAgIGF1dGhvcihwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICByZXR1cm4gdXNlcnMuZmluZCgodXNlcikgPT4ge1xuICAgICAgICAgIHJldHVybiB1c2VyLmlkID09PSAocGFyZW50LmF1dGhvciBhcyB1bmtub3duKVxuICAgICAgICB9KSFcbiAgICAgIH0sXG4gICAgICBjb21tZW50cyhwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICByZXR1cm4gY29tbWVudHMuZmlsdGVyKChjb21tZW50KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChjb21tZW50LnBvc3QgYXMgdW5rbm93bikgPT09IHBhcmVudC5pZFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgVXNlcjoge1xuICAgICAgcG9zdHMocGFyZW50LCBhcmdzLCBjdHgsIGluZm8pIHtcbiAgICAgICAgcmV0dXJuIHBvc3RzLmZpbHRlcigocG9zdCkgPT4ge1xuICAgICAgICAgIHJldHVybiAocG9zdC5hdXRob3IgYXMgdW5rbm93bikgPT09IHBhcmVudC5pZFxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIGNvbW1lbnRzKHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIHJldHVybiBjb21tZW50cy5maWx0ZXIoKGNvbW1lbnQpID0+IHtcbiAgICAgICAgICByZXR1cm4gKGNvbW1lbnQuYXV0aG9yIGFzIHVua25vd24pID09PSBwYXJlbnQuaWRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIENvbW1lbnQ6IHtcbiAgICAgIGF1dGhvcihwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICByZXR1cm4gdXNlcnMuZmluZCgodXNlcikgPT4ge1xuICAgICAgICAgIHJldHVybiB1c2VyLmlkID09PSAocGFyZW50LmF1dGhvciBhcyB1bmtub3duKVxuICAgICAgICB9KSFcbiAgICAgIH0sXG4gICAgICBwb3N0KHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIHJldHVybiBwb3N0cy5maW5kKChwb3N0KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHBvc3QuaWQgPT09IChwYXJlbnQucG9zdCBhcyB1bmtub3duKVxuICAgICAgICB9KSFcbiAgICAgIH1cbiAgICB9LFxuICAgIE11dGF0aW9uOiB7XG4gICAgICBjcmVhdGVVc2VyKHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIGNvbnN0IGVtYWlsVGFrZW4gPSB1c2Vycy5zb21lKCh1c2VyKSA9PiB1c2VyLmVtYWlsID09PSBhcmdzLmVtYWlsKVxuICAgICAgICBpZihlbWFpbFRha2VuKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignRW1haWwgdGFrZW4uJylcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXI6IFVzZXIgPSB7XG4gICAgICAgICAgaWQ6IHV1aWR2NCgpLFxuICAgICAgICAgIGNvbW1lbnRzOiBbXSxcbiAgICAgICAgICBwb3N0czogW10sXG4gICAgICAgICAgLi4uYXJnc1xuICAgICAgICB9XG4gICAgICAgIHVzZXJzLnB1c2godXNlcilcblxuICAgICAgICByZXR1cm4gdXNlclxuICAgICAgfSxcbiAgICAgIGNyZWF0ZVBvc3QocGFyZW50LCBhcmdzLCBjdHgsIGluZm8pIHtcbiAgICAgICAgY29uc3QgdXNlckV4aXN0cyA9IHVzZXJzLnNvbWUoKHVzZXIpID0+IHVzZXIuaWQgPT09IGFyZ3MuYXV0aG9yKVxuICAgICAgICBpZighdXNlckV4aXN0cykge1xuICAgICAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ1VzZXIgbm90IGZvdW5kLicpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3N0OiBQb3N0ID0ge1xuICAgICAgICAgIGlkOiB1dWlkdjQoKSxcbiAgICAgICAgICBjb21tZW50czogW10sXG4gICAgICAgICAgdGl0bGU6IGFyZ3MudGl0bGUsXG4gICAgICAgICAgYm9keTogYXJncy5ib2R5LFxuICAgICAgICAgIHB1Ymxpc2hlZDogYXJncy5wdWJsaXNoZWQsXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGF1dGhvcjogYXJncy5hdXRob3JcbiAgICAgICAgfVxuICAgICAgICBwb3N0cy5wdXNoKHBvc3QpXG5cbiAgICAgICAgcmV0dXJuIHBvc3RcbiAgICAgIH0sXG4gICAgICBjcmVhdGVDb21tZW50KHBhcmVudCwgYXJncywgY3R4LCBpbmZvKSB7XG4gICAgICAgIGNvbnN0IHVzZXJFeGlzdHMgPSB1c2Vycy5zb21lKCh1c2VyKSA9PiB1c2VyLmlkID09PSBhcmdzLmF1dGhvcilcbiAgICAgICAgaWYoIXVzZXJFeGlzdHMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdVc2VyIG5vdCBmb3VuZC4nKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zdEV4aXN0cyA9IHBvc3RzLnNvbWUoKHBvc3QpID0+IHBvc3QuaWQgPT09IGFyZ3MucG9zdCAmJiBwb3N0LnB1Ymxpc2hlZClcbiAgICAgICAgaWYoIXBvc3RFeGlzdHMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdQb3N0IG5vdCBmb3VuZC4nKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29tbWVudDogQ29tbWVudCA9IHtcbiAgICAgICAgICBpZDogdXVpZHY0KCksXG4gICAgICAgICAgdGV4dDogYXJncy50ZXh0LFxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBwb3N0OiBhcmdzLnBvc3QsXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGF1dGhvcjogYXJncy5hdXRob3JcbiAgICAgICAgfVxuICAgICAgICBjb21tZW50cy5wdXNoKGNvbW1lbnQpXG5cbiAgICAgICAgcmV0dXJuIGNvbW1lbnRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBzY2hlbWEgPSBjcmVhdGVTY2hlbWEoe1xuICAgIHR5cGVEZWZzLFxuICAgIHJlc29sdmVyc1xuICB9KVxuXG4gIGNvbnN0IHlvZ2EgPSBjcmVhdGVZb2dhKHsgc2NoZW1hIH0pXG5cbiAgY29uc3Qgc2VydmVyID0gY3JlYXRlU2VydmVyKHlvZ2EpXG5cbiAgc2VydmVyLmxpc3Rlbig0MDAwLCAoKSA9PiB7XG4gICAgY29uc29sZS5pbmZvKCdTZXJ2ZXIgaXMgcnVubmluZyBvbiBodHRwOi8vbG9jYWxob3N0OjQwMDAvZ3JhcGhxbCcpXG4gIH0pXG59XG5cbm1haW4oKS5jYXRjaCgoZXJyKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyKVxuICBwcm9jZXNzLmV4aXQoMSlcbn0pIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLEtBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUosT0FBQTtBQUVBLGVBQWVLLElBQUlBLENBQUEsRUFBRztFQUVwQjtFQUNBLE1BQU1DLEtBQWEsR0FBRyxDQUNwQjtJQUNFQyxFQUFFLEVBQUUsR0FBRztJQUNQQyxJQUFJLEVBQUUsUUFBUTtJQUNkQyxLQUFLLEVBQUUsb0JBQW9CO0lBQzNCQyxHQUFHLEVBQUUsRUFBRTtJQUNQQyxLQUFLLEVBQUUsRUFBRTtJQUNUQyxRQUFRLEVBQUU7RUFDWixDQUFDLEVBQ0Q7SUFDRUwsRUFBRSxFQUFFLEdBQUc7SUFDUEMsSUFBSSxFQUFFLE9BQU87SUFDYkMsS0FBSyxFQUFFLG1CQUFtQjtJQUMxQkUsS0FBSyxFQUFFLEVBQUU7SUFDVEMsUUFBUSxFQUFFO0VBQ1osQ0FBQyxFQUNEO0lBQ0VMLEVBQUUsRUFBRSxHQUFHO0lBQ1BDLElBQUksRUFBRSxNQUFNO0lBQ1pDLEtBQUssRUFBRSxrQkFBa0I7SUFDekJFLEtBQUssRUFBRSxFQUFFO0lBQ1RDLFFBQVEsRUFBRTtFQUNaLENBQUMs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