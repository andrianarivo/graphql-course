"use strict";

var _graphqlYoga = require("graphql-yoga");
var _http = require("http");
var _loadFiles = require("@graphql-tools/load-files");
async function main() {
  // Type definitions (schema)
  const typeDefs = await (0, _loadFiles.loadFiles)('**/*.graphql');

  // Resolvers
  const resolvers = {
    Query: {
      greeting(parent, args, ctx, info) {
        if (args.name) {
          return `Hello ${args.name}!`;
        } else {
          return 'Hello!'; // default
        }
      },

      add(_, args) {
        return args.a + args.b;
      },
      me() {
        return {
          id: '123098',
          name: 'Mike',
          email: 'mike@example.com',
          age: 28
        };
      },
      post() {
        return {
          id: '092',
          title: 'GraphQL 101',
          body: '',
          published: false
        };
      }
    }
  };
  const schema = (0, _graphqlYoga.createSchema)({
    typeDefs,
    resolvers
  });
  const yoga = (0, _graphqlYoga.createYoga)({
    schema
  });
  const server = (0, _http.createServer)(yoga);
  server.listen(4000, () => {
    console.info('Server is running on http://localhost:4000/graphql');
  });
}
main().catch(err => {
  console.error(err);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ3JhcGhxbFlvZ2EiLCJyZXF1aXJlIiwiX2h0dHAiLCJfbG9hZEZpbGVzIiwibWFpbiIsInR5cGVEZWZzIiwibG9hZEZpbGVzIiwicmVzb2x2ZXJzIiwiUXVlcnkiLCJncmVldGluZyIsInBhcmVudCIsImFyZ3MiLCJjdHgiLCJpbmZvIiwibmFtZSIsImFkZCIsIl8iLCJhIiwiYiIsIm1lIiwiaWQiLCJlbWFpbCIsImFnZSIsInBvc3QiLCJ0aXRsZSIsImJvZHkiLCJwdWJsaXNoZWQiLCJzY2hlbWEiLCJjcmVhdGVTY2hlbWEiLCJ5b2dhIiwiY3JlYXRlWW9nYSIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiIsImNvbnNvbGUiLCJjYXRjaCIsImVyciIsImVycm9yIiwicHJvY2VzcyIsImV4aXQiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlWW9nYSB9IGZyb20gJ2dyYXBocWwteW9nYSdcbmltcG9ydCB7IGNyZWF0ZVNjaGVtYSB9IGZyb20gJ2dyYXBocWwteW9nYSdcbmltcG9ydCB7IGNyZWF0ZVNlcnZlciB9IGZyb20gJ2h0dHAnXG5pbXBvcnQge2xvYWRGaWxlc30gZnJvbSBcIkBncmFwaHFsLXRvb2xzL2xvYWQtZmlsZXNcIjtcbmltcG9ydCB7UXVlcnlHcmVldGluZ0FyZ3N9IGZyb20gXCIuL2dlbmVyYXRlZC9ncmFwaHFsXCJcbmltcG9ydCB7R3JhcGhRTFJlc29sdmVJbmZvfSBmcm9tIFwiZ3JhcGhxbFwiXG5pbXBvcnQgeyBSZXNvbHZlcnMgfSBmcm9tICcuL2dlbmVyYXRlZC9ncmFwaHFsJ1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuXG4gIC8vIFR5cGUgZGVmaW5pdGlvbnMgKHNjaGVtYSlcbiAgY29uc3QgdHlwZURlZnMgPSBhd2FpdCBsb2FkRmlsZXMoJyoqLyouZ3JhcGhxbCcpXG5cbiAgLy8gUmVzb2x2ZXJzXG4gIGNvbnN0IHJlc29sdmVyczogUmVzb2x2ZXJzID0ge1xuICAgIFF1ZXJ5OiB7XG4gICAgICBncmVldGluZyhwYXJlbnQsIGFyZ3MsIGN0eCwgaW5mbykge1xuICAgICAgICBpZihhcmdzLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gYEhlbGxvICR7YXJncy5uYW1lfSFgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICdIZWxsbyEnIC8vIGRlZmF1bHRcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFkZChfLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBhcmdzLmEgKyBhcmdzLmJcbiAgICAgIH0sXG4gICAgICBtZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogJzEyMzA5OCcsXG4gICAgICAgICAgbmFtZTogJ01pa2UnLFxuICAgICAgICAgIGVtYWlsOiAnbWlrZUBleGFtcGxlLmNvbScsXG4gICAgICAgICAgYWdlOiAyOFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcG9zdCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogJzA5MicsXG4gICAgICAgICAgdGl0bGU6ICdHcmFwaFFMIDEwMScsXG4gICAgICAgICAgYm9keTogJycsXG4gICAgICAgICAgcHVibGlzaGVkOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2NoZW1hID0gY3JlYXRlU2NoZW1hKHtcbiAgICB0eXBlRGVmcyxcbiAgICByZXNvbHZlcnNcbiAgfSlcblxuICBjb25zdCB5b2dhID0gY3JlYXRlWW9nYSh7IHNjaGVtYSB9KVxuXG4gIGNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcih5b2dhKVxuXG4gIHNlcnZlci5saXN0ZW4oNDAwMCwgKCkgPT4ge1xuICAgIGNvbnNvbGUuaW5mbygnU2VydmVyIGlzIHJ1bm5pbmcgb24gaHR0cDovL2xvY2FsaG9zdDo0MDAwL2dyYXBocWwnKVxuICB9KVxufVxuXG5tYWluKCkuY2F0Y2goKGVycikgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycilcbiAgcHJvY2Vzcy5leGl0KDEpXG59KSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFLQSxlQUFlRyxJQUFJQSxDQUFBLEVBQUc7RUFFcEI7RUFDQSxNQUFNQyxRQUFRLEdBQUcsTUFBTSxJQUFBQyxvQkFBUyxFQUFDLGNBQWMsQ0FBQzs7RUFFaEQ7RUFDQSxNQUFNQyxTQUFvQixHQUFHO0lBQzNCQyxLQUFLLEVBQUU7TUFDTEMsUUFBUUEsQ0FBQ0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFO1FBQ2hDLElBQUdGLElBQUksQ0FBQ0csSUFBSSxFQUFFO1VBQ1osT0FBUSxTQUFRSCxJQUFJLENBQUNHLElBQUssR0FBRTtRQUM5QixDQUFDLE1BQU07VUFDTCxPQUFPLFFBQVEsRUFBQztRQUNsQjtNQUNGLENBQUM7O01BQ0RDLEdBQUdBLENBQUNDLENBQUMsRUFBRUwsSUFBSSxFQUFFO1FBQ1gsT0FBT0EsSUFBSSxDQUFDTSxDQUFDLEdBQUdOLElBQUksQ0FBQ08sQ0FBQztNQUN4QixDQUFDO01BQ0RDLEVBQUVBLENBQUEsRUFBRztRQUNILE9BQU87VUFDTEMsRUFBRSxFQUFFLFFBQVE7VUFDWk4sSUFBSSxFQUFFLE1BQU07VUFDWk8sS0FBSyxFQUFFLGtCQUFrQjtVQUN6QkMsR0FBRyxFQUFFO1FBQ1AsQ0FBQztNQUNILENBQUM7TUFDREMsSUFBSUEsQ0FBQSxFQUFHO1FBQ0wsT0FBTztVQUNMSCxFQUFFLEVBQUUsS0FBSztVQUNUSSxLQUFLLEVBQUUsYUFBYTtVQUNwQkMsSUFBSSxFQUFFLEVBQUU7VUFDUkMsU0FBUyxFQUFFO1FBQ2IsQ0FBQztNQUNIO0lBQ0Y7RUFDRixDQUFDO0VBRUQsTUFBTUMsTUFBTSxHQUFHLElBQUFDLHlCQUFZLEVBQUM7SUFDMUJ2QixRQUFRO0lBQ1JFO0VBQ0YsQ0FBQyxDQUFDO0VBRUYsTUFBTXNCLElBQUksR0FBRyxJQUFBQyx1QkFBVSxFQUFDO0lBQUVIO0VBQU8sQ0FBQyxDQUFDO0VBRW5DLE1BQU1JLE1BQU0sR0FBRyxJQUFBQyxrQkFBWSxFQUFDSCxJQUFJLENBQUM7RUFFakNFLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNO0lBQ3hCQyxPQUFPLENBQUNyQixJQUFJLENBQUMsb0RBQW9ELENBQUM7RUFDcEUsQ0FBQyxDQUFDO0FBQ0o7QUFFQVQsSUFBSSxDQUFDLENBQUMsQ0FBQytCLEtBQUssQ0FBRUMsR0FBRyxJQUFLO0VBQ3BCRixPQUFPLENBQUNHLEtBQUssQ0FBQ0QsR0FBRyxDQUFDO0VBQ2xCRSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDIn0=