type Comment {
  author: User!
  id: ID!
  post: Post!
  text: String!
}

input CommentOrderByInput {
  text: Sort
}

input CreateCommentInput {
  post: Int!
  text: String!
}

input CreatePostInput {
  body: String
  published: Boolean
  title: String!
}

input CreateUserInput {
  age: Int!
  email: String!
  name: String!
  password: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Mutation {
  createComment(data: CreateCommentInput!): Comment!
  createPost(data: CreatePostInput!): Post!
  createUser(data: CreateUserInput!): User!
  deleteComment(id: Int!): Comment!
  deletePost(id: Int!): Post!
  deleteUser: User!
  updateComment(data: UpdateCommentInput!, id: Int!): Comment!
  updatePost(data: UpdatePostInput!, id: Int!): Post!
  updateUser(data: UpdateUserInput!): User!
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

type Post {
  author: User!
  body: String
  comments: [Comment!]!
  id: ID!
  published: Boolean!
  title: String!
}

input PostOrderByInput {
  body: Sort
  published: Sort
  title: Sort
}

type Query {
  comments(cursorId: Int = 1, orderBy: CommentOrderByInput, skip: Int = 0, take: Int = 10): [Comment!]!
  me: User!
  myPosts(cursorId: Int = 1, orderBy: PostOrderByInput, skip: Int = 0, take: Int = 10): [Post!]!
  post(id: Int!): Post!
  posts(cursorId: Int = 1, orderBy: PostOrderByInput, skip: Int = 0, take: Int = 10): [Post!]!
  users(orderBy: UserOrderByInput, skip: Int = 0, take: Int = 10): [User!]!
}

enum Sort {
  ASC
  DESC
}

type Subscription {
  comment(postId: Int!): SubscriptionCommentEvent
  myPost: SubscriptionMyPostEvent
  post: SubscriptionPostEvent
}

type SubscriptionCommentEvent implements SubscriptionEvent {
  comment: Comment
  mutation: String!
}

interface SubscriptionEvent {
  mutation: String!
}

type SubscriptionMyPostEvent implements SubscriptionEvent {
  mutation: String!
  post: Post
}

type SubscriptionPostEvent implements SubscriptionEvent {
  mutation: String!
  post: Post
}

input UpdateCommentInput {
  text: String
}

input UpdatePostInput {
  body: String
  published: Boolean
  title: String
}

input UpdateUserInput {
  age: Int
  email: String
  name: String
  password: String
}

type User {
  age: Int!
  comments: [Comment!]!
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

input UserOrderByInput {
  age: Sort
  email: Sort
  name: Sort
}